sys_filteration:
  description: "Issues selection template"
  template: |
    You are an expert in JavaScript-based deep learning systems. Given an issue report, determine whether it should be retained for bug analysis based on the filtering criteria from the empirical study.

    ## Filtering Criteria
    An issue should be **REJECTED** if:

    1. Missing DL-Relevant Keywords
    - Does NOT contain any keyword from the 147-word DL vocabulary
    - Lacks TensorFlow.js-specific terms (e.g., "dispose", "WebGL") and general DL terms (e.g., "epoch")
    - All issues without these DL-relevant words are excluded

    2. Has Exclusion Labels
    - Contains corresponding exclusion labels (e.g., "stat:awaiting response")
    - Marked as "without answers"

    3. Deprecated Version Related
    - Related to deprecated versions of TensorFlow.js (before 2020-01-01)

    4.Unclear Descriptions
    - Issues with unclear descriptions that cannot be understood
    - Insufficient technical context to analyze the problem

    5.False Positives
    - Contains DL keywords but are not actual errors
    - Keywords present but issue is not reporting a real problem
    - Example: mentions keywords but describes normal behavior, not faults

    6.Non-Error Issues
    - Issues that contain keywords but are not reporting errors or faults
    - Discussions, questions, or feature requests rather than bug reports

    ## Output Format

    Respond with ONLY:
    - **Accepted** (retain for analysis)
    - **Rejected** (filter out)


sys_classification:
  description: "Bugs classification template"
  template: |
    # JavaScript-based Deep Learning Systems Bug Classification Prompt

    You are an expert in analyzing JavaScript-based deep learning systems bugs. Given an issue report from a GitHub repository related to TensorFlow.js, third-party DL libraries, or JavaScript-based DL applications, classify the bug according to the following taxonomies:

    ## Task Instructions

    Analyze the provided issue report and classify it into:
    1. **Bug Symptom** (what the fault looks like)
    2. **Root Cause** (why the fault occurs)

    For each classification, provide both the primary category and subcategory following the taxonomies below.

    ## Bug Symptom Taxonomy

    ### [A] Crash
    Functionality of DL systems is terminated unexpectedly with error messages like "undefined" or "uncaught Error"

    - **[A.1] Reference Error**
      - [A.1.1] DL Operator Exception: DL-related function exceptions
      - [A.1.2] Function Inaccessible: Traditional function exceptions
      - [A.1.3] Tensor Disposed: Disposed tensors accessed by program
      - [A.1.4] Attribute/Return Value Undefined: Undefined variable properties/function return values accessed
      - [A.1.5] Training Argument Exception: Issues with training arguments

    - **[A.2] Data & Model Error**
      - [A.2.1] Tensor Shape/Type/Value Error: Incorrect data types, shapes, and values for DL tensors
      - [A.2.2] JS Variable Shape/Type/Value Error: Incorrect data types, shapes, and values for JavaScript variables
      - [A.2.3] Model Usage/Design Error: Failure in model usage or structure construction

    - **[A.3] Fetch Failure**
    Crashes during web API requests for model files or data, often due to same-origin policy restrictions

    - **[A.4] Browser & Device Error**
    Crashes showing messages that browsers or devices are problematic (e.g., WebGL not supported)

    - **[A.5] Others**
    Other crash types with low frequency or unclear classification

    ### [B] Poor Performance
    Performance issues that slow down execution, consume excessive resources, and provide bad user experiences

    - **[B.1] Time**
      - [B.1.1] Slow Execution: Systems work but are extremely slow during DL tasks
      - [B.1.2] Browser Hangs: Systems cease to respond to inputs, browsers become unresponsive

    - **[B.2] Memory**
      - [B.2.1] Memory Leak: Gradual increase in memory usage over time
      - [B.2.2] Out of Memory: System terminates due to insufficient memory
      - [B.2.3] Abnormal GPU Memory/Utilization: Unexpectedly high or low GPU memory usage

    - **[B.3] Others**
      - [B.3.1] Regression: Performance issues occurring after TensorFlow.js upgrades
      - [B.3.2] Unstable: Inference results are inconsistent or unstable

    ### [C] Build & Initialization Failure
    Failures during building and initializing necessary environments for JavaScript-based DL applications

    - **[C.1] TF.js/JS Application Compile Failure**
    Building failure when compiling TensorFlow.js from source code or compiling DL applications

    - **[C.2] npm Package Installation Failure**
    Installation failures when installing compiled TensorFlow.js via NPM

    - **[C.3] Multi-backend Initialization Failure**
    Failure to initialize certain DL backends (e.g., Wasm) even after successful TensorFlow.js installation

    ### [D] Incorrect Functionality
    Systems run normally without crashes but produce incorrect results

    - **[D.1] Inconsistency between Backends/Platforms/Devices**
    Different results produced under multiple DL backends, platforms, or devices

    - **[D.2] Poor Accuracy**
    Models give wrong inference results under certain data

    - **[D.3] Inf/None/Null Results**
    Non-numerical outputs such as infinity and Null/None results

    - **[D.4] Others**
    Other incorrect functionality cases

    ### [E] Document Error
    Faults related to TensorFlow.js official documents/tutorials, including invalid links, incorrect instructions, and missing tutorials

    ## Root Cause Taxonomy

    ### [A] Incorrect Programming
    Faults caused by program code implementation issues

    - **[A.1] Unimplemented Operator**
    DL operators used in systems are not yet supported or implemented by TensorFlow.js

    - **[A.2] Inconsistent Modules in TF.js**
    Inconsistent implementations between different TensorFlow.js modules

    - **[A.3] API Misuse**
    Faults due to users' misunderstanding of APIs, including missing/redundant calls, wrong API names, invalid parameters

    - **[A.4] Incorrect Code Logic**
    Faulty implementation in DL-specific algorithms, memory management, or environmental adaptability

    - **[A.5] Incompatibility between 3rd-party DL Library and TF.js**
    Version mismatches between 3rd-party libraries and required TensorFlow.js versions

    - **[A.6] Import Error**
    Missing/incorrect import of TensorFlow.js or importing multiple versions simultaneously

    - **[A.7] Improper Exception Handling**
    Missing exceptions, suspicious exceptions, or confusing error messages

    ### [B] Configuration & Dependency Error
    Faults caused by incorrect configuration and dependencies

    - **[B.1] Multi-environment Misconfiguration**
    Incorrect bundler configurations for deploying on heterogeneous environments

    - **[B.2] Dependency Error**
    Missing/redundant dependencies, version mismatches, or security vulnerabilities in dependencies

    - **[B.3] Untimely Update**
    Issues caused by not updating tensorflow.so and npm packages in time

    - **[B.4] Confused Document**
    Problems caused by unclear or incorrect TensorFlow.js documentation

    ### [C] Data/Model Error
    Faults introduced by DL models and data

    - **[C.1] Data/Model Inaccessibility**
    Data/models cannot be accessed due to browser limitations, UI framework limitations, or incorrect paths

    - **[C.2] Improper Model/Tensor Attribute**
    Poor model design, improper model parameters, or inappropriate model size

    ### [D] Execution Environment Error
    Faults caused by imperfect support for various hardware/software environments

    - **[D.1] Device Incompatibility**
    Issues when TensorFlow.js executes on specific hardware and operating systems

    - **[D.2] Browser Incompatibility**
    Compatibility issues with PC browsers or mobile browsers

    - **[D.3] Cross-platform App Framework Incompatibility**
    Incompatibility with cross-platform application frameworks (e.g., React Native)

    - **[D.4] WebGL Limits**
    Faults caused by inherited limitations of WebGL

    ### [E] Unknown
    Root causes that are difficult to analyze or unclear from the available information

    ## Output Format

    Provide ONLY output your classification in the following JSON format with NO explanation or reasoning:

    ```
    {
      "bug_symptom": {
        "primary_category": "[Letter][Category Name]",
        "subcategory": "[Letter.Number][Subcategory Name]",
        "specific_type": "[Letter.Number.Number][Specific Type]"
      },
      "root_cause": {
        "primary_category": "[Letter][Category Name]",
        "subcategory": "[Letter.Number][Subcategory Name]"
      }
    }
    ```

    ## Classification Guidelines

    1. **Focus on observable behavior** described in the issue for symptom classification
    2. **Look for underlying technical reasons** mentioned or implied for root cause classification
    3. **Consider the JavaScript-based DL context** (browsers, Node.js, TensorFlow.js)
    4. **Pay attention to keywords** like error messages, environment details, and technical terms
    5. **If multiple symptoms/causes are present**, choose the most prominent or primary one
    6. **Provide ONLY the classification result with NO additional explanation**


user_input:
  description: "User input template"
  template: |
    Please carefully read the following issue report and provide the classification result:
    {{ISSUE REPORT}}